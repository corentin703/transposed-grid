/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Data } from "./models/data";
import { Group, GroupCollapsedEvent } from "./models/group";
import { Row } from "./models/row";
import { ToolbarButtonOptions, ToolbarOptions } from "./models/toolbar";
import { CustomTemplate } from "./models/customTemplate";
import { EditingOptions, EditionResultEvent } from "./models/edition";
import { SelectionEvent, SelectionOptions } from "./models/selection";
import { ClickEvent } from "./models/click";
export { Data } from "./models/data";
export { Group, GroupCollapsedEvent } from "./models/group";
export { Row } from "./models/row";
export { ToolbarButtonOptions, ToolbarOptions } from "./models/toolbar";
export { CustomTemplate } from "./models/customTemplate";
export { EditingOptions, EditionResultEvent } from "./models/edition";
export { SelectionEvent, SelectionOptions } from "./models/selection";
export { ClickEvent } from "./models/click";
export namespace Components {
    interface DefaultCellEditTemplate {
        "data": Data;
        "focusInput": (options?: FocusOptions) => Promise<void>;
        "group"?: Group | undefined;
        "originalValue": any;
        "primaryKey": string;
        "row": Row;
        "selectAll": () => Promise<void>;
        "value": any;
    }
    interface DefaultCellTemplate {
        "data": Data;
        "group"?: Group | undefined;
        "originalValue": any;
        "primaryKey": string;
        "row": Row;
        "value": any;
    }
    interface GridToolbar {
        "center"?: ToolbarButtonOptions[];
        "left"?: ToolbarButtonOptions[];
        "right"?: ToolbarButtonOptions[];
        "toolbarTemplate"?: (props: CustomTemplate<ToolbarOptions>) => void;
    }
    interface ItemCell {
        "data": Data;
        "group"?: Group | undefined;
        "isEditing": boolean;
        "originalValue": any;
        "primaryKey": string;
        "row": Row;
        "value": any;
    }
    interface TransposedGrid {
        "allowHeaderFiltering"?: boolean;
        "allowSorting"?: boolean;
        "editing"?: EditingOptions;
        "focusedRowPrimaryKeyValue"?: string;
        "groups"?: Group[];
        "items": Data[];
        "primaryKey"?: string;
        "rows"?: Row[];
        "selection"?: SelectionOptions;
        "striped": boolean;
        "tableClass"?: string;
        "toolbar"?: ToolbarOptions;
        "toolbarTemplate"?: (props: CustomTemplate<ToolbarOptions>) => void;
    }
}
export interface DefaultCellEditTemplateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDefaultCellEditTemplateElement;
}
export interface ItemCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLItemCellElement;
}
export interface TransposedGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTransposedGridElement;
}
declare global {
    interface HTMLDefaultCellEditTemplateElement extends Components.DefaultCellEditTemplate, HTMLStencilElement {
    }
    var HTMLDefaultCellEditTemplateElement: {
        prototype: HTMLDefaultCellEditTemplateElement;
        new (): HTMLDefaultCellEditTemplateElement;
    };
    interface HTMLDefaultCellTemplateElement extends Components.DefaultCellTemplate, HTMLStencilElement {
    }
    var HTMLDefaultCellTemplateElement: {
        prototype: HTMLDefaultCellTemplateElement;
        new (): HTMLDefaultCellTemplateElement;
    };
    interface HTMLGridToolbarElement extends Components.GridToolbar, HTMLStencilElement {
    }
    var HTMLGridToolbarElement: {
        prototype: HTMLGridToolbarElement;
        new (): HTMLGridToolbarElement;
    };
    interface HTMLItemCellElement extends Components.ItemCell, HTMLStencilElement {
    }
    var HTMLItemCellElement: {
        prototype: HTMLItemCellElement;
        new (): HTMLItemCellElement;
    };
    interface HTMLTransposedGridElement extends Components.TransposedGrid, HTMLStencilElement {
    }
    var HTMLTransposedGridElement: {
        prototype: HTMLTransposedGridElement;
        new (): HTMLTransposedGridElement;
    };
    interface HTMLElementTagNameMap {
        "default-cell-edit-template": HTMLDefaultCellEditTemplateElement;
        "default-cell-template": HTMLDefaultCellTemplateElement;
        "grid-toolbar": HTMLGridToolbarElement;
        "item-cell": HTMLItemCellElement;
        "transposed-grid": HTMLTransposedGridElement;
    }
}
declare namespace LocalJSX {
    interface DefaultCellEditTemplate {
        "data": Data;
        "group"?: Group | undefined;
        "onValueChange"?: (event: DefaultCellEditTemplateCustomEvent<any>) => void;
        "originalValue"?: any;
        "primaryKey": string;
        "row": Row;
        "value"?: any;
    }
    interface DefaultCellTemplate {
        "data": Data;
        "group"?: Group | undefined;
        "originalValue"?: any;
        "primaryKey": string;
        "row": Row;
        "value"?: any;
    }
    interface GridToolbar {
        "center"?: ToolbarButtonOptions[];
        "left"?: ToolbarButtonOptions[];
        "right"?: ToolbarButtonOptions[];
        "toolbarTemplate"?: (props: CustomTemplate<ToolbarOptions>) => void;
    }
    interface ItemCell {
        "data": Data;
        "group"?: Group | undefined;
        "isEditing"?: boolean;
        "onValueChange"?: (event: ItemCellCustomEvent<any>) => void;
        "originalValue"?: any;
        "primaryKey": string;
        "row": Row;
        "value"?: any;
    }
    interface TransposedGrid {
        "allowHeaderFiltering"?: boolean;
        "allowSorting"?: boolean;
        "editing"?: EditingOptions;
        "focusedRowPrimaryKeyValue"?: string;
        "groups"?: Group[];
        "items"?: Data[];
        "onCancel"?: (event: TransposedGridCustomEvent<EditionResultEvent>) => void;
        "onEditionValidation"?: (event: TransposedGridCustomEvent<EditionResultEvent>) => void;
        "onGroupCollapsed"?: (event: TransposedGridCustomEvent<GroupCollapsedEvent>) => void;
        "onItemClick"?: (event: TransposedGridCustomEvent<ClickEvent>) => void;
        "onItemDoubleClick"?: (event: TransposedGridCustomEvent<ClickEvent>) => void;
        "onItemHoovering"?: (event: TransposedGridCustomEvent<ClickEvent>) => void;
        "onItemSelectionChange"?: (event: TransposedGridCustomEvent<SelectionEvent>) => void;
        "onSave"?: (event: TransposedGridCustomEvent<EditionResultEvent>) => void;
        "primaryKey"?: string;
        "rows"?: Row[];
        "selection"?: SelectionOptions;
        "striped"?: boolean;
        "tableClass"?: string;
        "toolbar"?: ToolbarOptions;
        "toolbarTemplate"?: (props: CustomTemplate<ToolbarOptions>) => void;
    }
    interface IntrinsicElements {
        "default-cell-edit-template": DefaultCellEditTemplate;
        "default-cell-template": DefaultCellTemplate;
        "grid-toolbar": GridToolbar;
        "item-cell": ItemCell;
        "transposed-grid": TransposedGrid;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "default-cell-edit-template": LocalJSX.DefaultCellEditTemplate & JSXBase.HTMLAttributes<HTMLDefaultCellEditTemplateElement>;
            "default-cell-template": LocalJSX.DefaultCellTemplate & JSXBase.HTMLAttributes<HTMLDefaultCellTemplateElement>;
            "grid-toolbar": LocalJSX.GridToolbar & JSXBase.HTMLAttributes<HTMLGridToolbarElement>;
            "item-cell": LocalJSX.ItemCell & JSXBase.HTMLAttributes<HTMLItemCellElement>;
            "transposed-grid": LocalJSX.TransposedGrid & JSXBase.HTMLAttributes<HTMLTransposedGridElement>;
        }
    }
}
